제이유닛(JUnit) : 
프로젝트폴더 > 우클릭(속성Properties) > JavaBuildPath > Library > ClassPath > 우측 add Library > JUnit

	자바 언어를 위한 테스트 프레임워크
	소프트웨어 개발 단위 테스트를 작성하고 실행하는데 사용
	자동화된 테스트 케이스 실행과 테스트 결과 보고를 지원
	품질을 향상시키고 버그를 빠르게 식별하는데 도움을 줌
	
	1.테스트케이스 (Test Case):
		특정 코드 또는 기능을 테스트하는 작은 단위
		각 테스트 케이스는 하나의 메서드로 표현
		@Test 어노테이션을 사용해서 표시
	
	<Assert>
		테스트 결과를 검증
		예상결과와 실제 결과를 비교하고 차이가 있을 경우 테스트를 실패로 표시
		
		assertEquals(예상결과, 실제결과):
			두 값이 동일할 경우 테스트 성공
			그렇지 않은 경우 실패
			값의 타입이나 내용이 다르면 테스트 실패
		
		assertTrue(조건):
			조건이 true인지 확인
			조건이 true이면 테스트 성공 / false 실패
		
		assertFalse(조건):
			조건이 false인지 확인
			조건이 false면 테스트 성공 / true 실패
			
		assertNotNull(객체):
			주어진 객체가 null이 아닌지 확인
			객체가 null이 아닌경우 테스트 성공
			null인 경우 테스트 실패
		
		assertNull(객체):
			주어진 객체가 null인지 확인
			객체가 null인 경우 테스트 성공
			null이 아닌 경우 실패
			
		assertArrayEquals(예상결과, 실제결과):
			배열값의 예상결과와 실제결과가 일치하는지 확인..
			**주의: asserEquals로 비교하면 냅다 주소값으로 비교돼서 무조건 false가 뜸...
			
	2.테스트 픽스쳐(Test Fixture)
		테스트 케이스 실행을 위한 초기 설정이나 리소스를 준비하는 과정
		@Before @After 어노테이션을 사용하여
		각 테스트 케이스 전 후에 실행될 메서드를 정의할 수 있도록 지원
		데이터베이스 연결을 설정하거나 파일을 생성하는 작업을 수행할 수 있음
		
	
		Test Suite(테스트 스위트):
			여러 테스트 케이스를 묶어서 한 번에 실행하면 테스트 스위트 사용
			@RunWith(Suite.class) 어노테이션을 사용해서 테스트 스위트 클래스를 정의
			그 안에서 실행할 테스트 케이스 클래스를 지정